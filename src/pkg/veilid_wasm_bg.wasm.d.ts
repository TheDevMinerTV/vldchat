/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function initialize_veilid_wasm(): void;
export function initialize_veilid_core(a: number, b: number): void;
export function change_log_level(a: number, b: number, c: number, d: number): void;
export function startup_veilid_core(a: number, b: number, c: number): number;
export function get_veilid_state(): number;
export function attach(): number;
export function detach(): number;
export function shutdown_veilid_core(): number;
export function routing_context(): number;
export function release_routing_context(a: number): number;
export function routing_context_with_default_safety(a: number): number;
export function routing_context_with_safety(a: number, b: number, c: number): number;
export function routing_context_with_sequencing(a: number, b: number, c: number): number;
export function routing_context_safety(a: number): number;
export function routing_context_app_call(a: number, b: number, c: number, d: number, e: number): number;
export function routing_context_app_message(a: number, b: number, c: number, d: number, e: number): number;
export function routing_context_create_dht_record(a: number, b: number, c: number, d: number): number;
export function routing_context_open_dht_record(a: number, b: number, c: number, d: number, e: number): number;
export function routing_context_close_dht_record(a: number, b: number, c: number): number;
export function routing_context_delete_dht_record(a: number, b: number, c: number): number;
export function routing_context_get_dht_value(a: number, b: number, c: number, d: number, e: number): number;
export function routing_context_set_dht_value(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function routing_context_watch_dht_values(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function routing_context_cancel_dht_watch(a: number, b: number, c: number, d: number, e: number): number;
export function new_private_route(): number;
export function new_custom_private_route(a: number, b: number, c: number, d: number): number;
export function import_remote_private_route(a: number, b: number): number;
export function release_private_route(a: number, b: number): number;
export function app_call_reply(a: number, b: number, c: number, d: number): number;
export function open_table_db(a: number, b: number, c: number): number;
export function release_table_db(a: number): number;
export function delete_table_db(a: number, b: number): number;
export function table_db_get_column_count(a: number): number;
export function table_db_get_keys(a: number, b: number): number;
export function table_db_transact(a: number): number;
export function release_table_db_transaction(a: number): number;
export function table_db_transaction_commit(a: number): number;
export function table_db_transaction_rollback(a: number): number;
export function table_db_transaction_store(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function table_db_transaction_delete(a: number, b: number, c: number, d: number): number;
export function table_db_store(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function table_db_load(a: number, b: number, c: number, d: number): number;
export function table_db_delete(a: number, b: number, c: number, d: number): number;
export function valid_crypto_kinds(a: number): void;
export function best_crypto_kind(): number;
export function verify_signatures(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function generate_signatures(a: number, b: number, c: number, d: number): number;
export function generate_key_pair(a: number): number;
export function crypto_cached_dh(a: number, b: number, c: number, d: number, e: number): number;
export function crypto_compute_dh(a: number, b: number, c: number, d: number, e: number): number;
export function crypto_random_bytes(a: number, b: number): number;
export function crypto_default_salt_length(a: number): number;
export function crypto_hash_password(a: number, b: number, c: number, d: number, e: number): number;
export function crypto_verify_password(a: number, b: number, c: number, d: number, e: number): number;
export function crypto_derive_shared_secret(a: number, b: number, c: number, d: number, e: number): number;
export function crypto_random_nonce(a: number): number;
export function crypto_random_shared_secret(a: number): number;
export function crypto_generate_key_pair(a: number): number;
export function crypto_generate_hash(a: number, b: number, c: number): number;
export function crypto_validate_key_pair(a: number, b: number, c: number, d: number, e: number): number;
export function crypto_validate_hash(a: number, b: number, c: number, d: number, e: number): number;
export function crypto_distance(a: number, b: number, c: number, d: number, e: number): number;
export function crypto_sign(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function crypto_verify(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function crypto_aead_overhead(a: number): number;
export function crypto_decrypt_aead(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function crypto_encrypt_aead(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function crypto_crypt_no_auth(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function now(a: number): void;
export function debug(a: number, b: number): number;
export function veilid_version_string(a: number): void;
export function veilid_version(): number;
export function __wbg_veilidclient_free(a: number): void;
export function veilidclient_initializeCore(a: number): number;
export function veilidclient_startupCore(a: number, b: number, c: number): number;
export function veilidclient_changeLogLevel(a: number, b: number, c: number): void;
export function veilidclient_shutdownCore(): number;
export function veilidclient_getState(): number;
export function veilidclient_attach(): number;
export function veilidclient_detach(): number;
export function veilidclient_debug(a: number, b: number): number;
export function veilidclient_version(): number;
export function veilidclient_versionString(a: number): void;
export function veilidcrypto_validCryptoKinds(): number;
export function veilidcrypto_bestCryptoKind(a: number): void;
export function veilidcrypto_cachedDh(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function veilidcrypto_computeDh(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function veilidcrypto_randomBytes(a: number, b: number, c: number, d: number): void;
export function veilidcrypto_defaultSaltLength(a: number, b: number, c: number): void;
export function veilidcrypto_hashPassword(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function veilidcrypto_verifyPassword(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function veilidcrypto_deriveSharedSecret(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function veilidcrypto_randomNonce(a: number, b: number, c: number): void;
export function veilidcrypto_randomSharedSecret(a: number, b: number, c: number): void;
export function veilidcrypto_verifySignatures(a: number, b: number, c: number, d: number, e: number): void;
export function veilidcrypto_generateSignatures(a: number, b: number, c: number, d: number): void;
export function veilidcrypto_generateKeyPair(a: number, b: number, c: number): void;
export function veilidcrypto_generateHash(a: number, b: number, c: number, d: number, e: number): void;
export function veilidcrypto_validateKeyPair(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function veilidcrypto_validateHash(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function veilidcrypto_distance(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function veilidcrypto_sign(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function veilidcrypto_verify(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function veilidcrypto_aeadOverhead(a: number, b: number, c: number): void;
export function veilidcrypto_decryptAead(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function veilidcrypto_encryptAead(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function veilidcrypto_cryptNoAuth(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function veilidcrypto_CRYPTO_KEY_LENGTH(): number;
export function veilidcrypto_CRYPTO_KEY_LENGTH_ENCODED(): number;
export function veilidcrypto_NONCE_LENGTH(): number;
export function veilidcrypto_SIGNATURE_LENGTH(): number;
export function veilidcrypto_SIGNATURE_LENGTH_ENCODED(): number;
export function __wbg_veilidroutingcontext_free(a: number): void;
export function veilidroutingcontext_create(a: number): void;
export function veilidroutingcontext_newPrivateRoute(): number;
export function veilidroutingcontext_importRemotePrivateRoute(a: number, b: number, c: number, d: number): void;
export function veilidroutingcontext_newCustomPrivateRoute(a: number, b: number): number;
export function veilidroutingcontext_releasePrivateRoute(a: number, b: number, c: number): void;
export function veilidroutingcontext_appCallReply(a: number, b: number, c: number, d: number): number;
export function veilidroutingcontext_withDefaultSafety(a: number, b: number): void;
export function veilidroutingcontext_withSafety(a: number, b: number, c: number): void;
export function veilidroutingcontext_withSequencing(a: number, b: number, c: number): void;
export function veilidroutingcontext_safety(a: number, b: number): void;
export function veilidroutingcontext_appMessage(a: number, b: number, c: number, d: number, e: number): number;
export function veilidroutingcontext_appCall(a: number, b: number, c: number, d: number, e: number): number;
export function veilidroutingcontext_createDhtRecord(a: number, b: number, c: number, d: number): number;
export function veilidroutingcontext_openDhtRecord(a: number, b: number, c: number, d: number, e: number): number;
export function veilidroutingcontext_closeDhtRecord(a: number, b: number, c: number): number;
export function veilidroutingcontext_deleteDhtRecord(a: number, b: number, c: number): number;
export function veilidroutingcontext_getDhtValue(a: number, b: number, c: number, d: number, e: number): number;
export function veilidroutingcontext_setDhtValue(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function __wbg_veilidtabledb_free(a: number): void;
export function veilidtabledb_new(a: number, b: number, c: number): number;
export function veilidtabledb_openTable(a: number): number;
export function veilidtabledb_deleteTable(a: number): number;
export function veilidtabledb_load(a: number, b: number, c: number, d: number): number;
export function veilidtabledb_store(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function veilidtabledb_delete(a: number, b: number, c: number, d: number): number;
export function veilidtabledb_getKeys(a: number, b: number): number;
export function veilidtabledb_createTransaction(a: number): number;
export function __wbg_veilidtabledbtransaction_free(a: number): void;
export function veilidtabledbtransaction_new(): number;
export function veilidtabledbtransaction_commit(a: number): number;
export function veilidtabledbtransaction_rollback(a: number, b: number): void;
export function veilidtabledbtransaction_store(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function veilidtabledbtransaction_deleteKey(a: number, b: number, c: number, d: number, e: number): void;
export function veilidcrypto_HASH_DIGEST_LENGTH(): number;
export function veilidcrypto_HASH_DIGEST_LENGTH_ENCODED(): number;
export function veilidcrypto_NONCE_LENGTH_ENCODED(): number;
export function veilidcrypto_PUBLIC_KEY_LENGTH(): number;
export function veilidcrypto_PUBLIC_KEY_LENGTH_ENCODED(): number;
export function veilidcrypto_ROUTE_ID_LENGTH(): number;
export function veilidcrypto_ROUTE_ID_LENGTH_ENCODED(): number;
export function veilidcrypto_SECRET_KEY_LENGTH(): number;
export function veilidcrypto_SECRET_KEY_LENGTH_ENCODED(): number;
export function veilidcrypto_SHARED_SECRET_LENGTH(): number;
export function veilidcrypto_SHARED_SECRET_LENGTH_ENCODED(): number;
export function veilidroutingcontext_new(a: number): void;
export function __wbg_veilidcrypto_free(a: number): void;
export function main_rs(): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function wasm_bindgen__convert__closures__invoke1_mut__h235137cd17332523(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke0_mut__hfe1bbe6928fb8edb(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h51d852193a44952a(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut___A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__habbb518e4ef9bcbf(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke1_mut__h2fc23feb0e10982e(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke1_mut__hea627ba13712ea21(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h40ab5bc65c8acb7a(a: number, b: number, c: number, d: number): void;
